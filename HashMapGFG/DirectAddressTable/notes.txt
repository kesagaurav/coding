# hashing introduction 
# what is hashing 
# hashing is used for storing and retreving of data effectively.
# the problem with arrays is 
# 1. it cannot handle large keys
# 2. flaoting point numbers.
# 3. it cannot handle string strings bec keys can be address or strings.
# what hash function does/how hash function works
# the task of hash function is to convert large keys,floating num,strings  into smaller values.
# should always map large key to smaller key values
# should generate keys from 0 to m-1/n-1 
# should uniformly distributed large keys into hash table slots.

# example of hash function
# h(large_keys)=large_keys%m 
# str="abcd";
# (str[o]*x^0+str[1]*x^1+str[2]*x^2+str[3]*x^4)%m where m is table size.
# universal hashing. -> a set of hash functions pick a randlomy hash function to hash all the data in hash

# collison handling 
# 1.if we know keys in advance,then we know is perfect hashing.
# Birthday paradox -> ther are 23 people in room where halfof(50%) people will have 2 birthdays.
# 2.if we don't know the keys in advance we will do the followings.
# 1.chain 
# 2. open addressing.-> we are having three -> 1.linear probing -> 2.quardaric probing -> 3.double hashing.

# chaining perfomance 
# 1.m=no of hash table slots 
# 2.n=no of keys to be inserted.
# loadfactor(alpha)=n/m 
# expected chain length=alpha

# DS(data structures) for stroring chains 
# 1. linked lists. -> insert,dlete,search -> o(l)
# 2.dynamic size arrays(arraylist in java,vector in c++,list in python) -> same with linked lists which is above
# 3.self balacncing trees -> avl,red balck trees -> insert,delete,search -> o(logl)

# Hashing is an improvement over Direct Access Table. 
# The idea is to use a hash function that converts a given phone number or any other key to a smaller number and uses the small number as an index in a table called a hash table.