					
        sorting algorithims					code
					
Bubble sort					"	public static void bubbleSort(int arr[], int n)
    {
        //code here
        for(int i=0;i<n;i++){
            for(int j=0;j<n-i-1;j++){
                if(arr[j]>arr[j+1]){
                    int temp=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=temp;
                }
            }
        }
    }"
					
					
					
					"static void insert(int arr[],int i)
  {
      int j=0;
  }
  //Function to sort the array using insertion sort algorithm.
  public static void insertionSort(int arr[], int n)
  {
      //code here
     for(int i=1;i<arr.length;i++){
           int key=arr[i];
           int j=i-1;
           while(j>=0&&arr[j]>=key){
               arr[j+1]=arr[j];
               j--;
           }
           arr[j+1]=key;
       }
  }"
Insertion sort					
					
					
searching algorithm					"static int search(int arr[], int N, int X)
    {
        
        // Your code here
        for(int i=0;i<N;i++){
            if(arr[i]==X){
                return i;
            }
        }
        return -1;
        
    }"
					
search an element in rotated sorted array					"static int searchInSorted(int arr[], int N, int K)
    {
        
        // Your code here
        int l=0;
        int r=N-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(arr[mid]==K){
                return 1;
            }else if(arr[mid]<K){
               l=mid+1;
               
            }else{
              r=mid-1;
                
            }
        }
        return -1;
        
    }"
					
union of two sorted arrays					"class Solution
{
    //Function to return a list containing the union of the two arrays.
    public static ArrayList<Integer> findUnion(int arr1[], int arr2[], int n, int m)
    {
        // add your code here
         n=arr1.length;
        m=arr2.length;
        ArrayList<Integer> list=new ArrayList<>();
        int i=0,j=0,last=0;
        while(i<n&&j<m){
            if(i>0&&arr1[i]==arr1[i-1]){
                i++;
                continue;
            }
            
             if(j>0&&arr2[j]==arr2[j-1]){
                j++;
                continue;
            }
            
            if(arr1[i]<arr2[j]){
               list.add(arr1[i]);
                i++;
            }else if(arr1[i]>arr2[j]){
               list.add(arr2[j]);
                j++;
            }else{
               //last=arr1[i];
                list.add(arr1[i]);
                i++;
                j++;
            }
        }
        while (i < n) {
                if (i > 0 && arr1[i] == arr1[i - 1]) {
                     i++;
                continue;
                }
                list.add(arr1[i]);
                    i++;

            }
            while (j < m) {
                if (j > 0 && arr2[j] == arr2[j - 1]) {
                    j++;
                    continue;
                }
                
                list.add(arr2[j]);
                    j++;

            }
        
        
       
        
        return list;
    }"
					
Intersection of two sorted arrays					" n=arr1.length;
        m=arr2.length;
        ArrayList<Integer> list=new ArrayList<>();
        int i=0,j=0,last=0;
        while(i<n&&j<m){
            if(i>0&&arr1[i]==arr1[i-1]){
                i++;
                continue;
            }
            
            //  if(j>0&&arr2[j]==arr1[j-1]){
            //     j++;
            //     continue;
            // }
            
            if(arr1[i]<arr2[j]){
               
                i++;
            }else if(arr1[i]>arr2[j]){
              
                j++;
            }else{
               //last=arr1[i];
                list.add(arr1[i]);
                i++;
                j++;
            }
        }
        
        
       
        
        return list;
        
        
    }"
binary sort					"static void binSort(int A[], int N)
    {
        // add your code here
        Arrays.sort(A);
        
     }"
na√Øve partition					"public class Naive {
    public static void main(String[] args) throws Exception {
        int arr[] = new int[] { 5, 13, 6, 9, 12, 11, 8 };

        int n = arr.length;
        naivePartition(arr, 0, n - 1, n - 1);

        for (int x : arr)
            System.out.print(x + "" "");
    }

    public static void naivePartition(int ar[], int l, int h, int p) {
        int temp[] = new int[h - l + 1], index = 0;
        for (int i = l; i <= h; i++)
            if (ar[i] <= ar[p]) {
                temp[index] = ar[i];
                index++;
            }

        for (int i = l; i <= h; i++)
            if (ar[i] > ar[p]) {
                temp[index] = ar[i];
                index++;
            }

        for (int i = l; i <= h; i++) {
            ar[i] = temp[i - l];
        }

    }
}"
sorting the absolute difference					Collections.sort(arr,(x,y)->Math.abs(x-k)-Math.abs(y-k));
					
min difference in array					" Arrays.sort(arr);
        int min=Integer.MAX_VALUE;
        for(int i=1;i<arr.length;i++){
            min=Math.min(min,arr[i]-arr[i-1]);
        }
        return min;"
check if 2 nos are euals in hashing					" Arrays.sort(A);
        Arrays.sort(B);
        
        return Arrays.equals(A,B);"
					
count of non-repeated numbers 			in hashing		" long c=0;
        HashMap<Integer,Integer> hmap=new HashMap<Integer,Integer>();
        for(int i=0;i<arr.length;i++){
            hmap.put(arr[i],hmap.getOrDefault(arr[i],0)+1);
        }
        for(int x:arr){
            if(hmap.get(x)==1){
                c++;
            }
        }
        return c;"
					
kth smallest elemet					" public static int kthSmallest(int arr[], int n, int k)
    {
        // Your code here
        int l=0,h=n-1;
        
        while(l<=h){
            int p=partition(arr,l, h);
            if(p==k-1)
                return arr[p];
            else if(p>k-1)
                h=p-1;
            else
                l=p+1;
            
        }
        return -1;
    }
    
    public static int partition(int a[],int l,int h){
        int pivot=a[h];
        int i=l-1;
        for(int j=l;j<=h-1;j++){
            if(a[j]<pivot){
                i++;
                int temp=a[i];
                a[i]=a[j];
                a[j]=temp;
            }
        }
        int temp=a[i+1];
        a[i+1]=a[h];
        a[h]=temp;
        return (i+1);
        
    }"
					
					
qucik sort using lomuto partition					"static void quickSort(int arr[], int low, int high)
    {
        // code here
        if(low<high){
        int p=partition(arr,low,high);
        quickSort(arr,low,p-1);
        quickSort(arr,p+1,high);
        }
    }
    static int partition(int arr[], int low, int high)
    {
        // your code here
        
        int i=low-1;
        int pivot=arr[high];
        for(int j=low;j<=high-1;j++){
            if(arr[j]<pivot){
                i++;
                int temp=arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
            }
        }
        int temp=arr[i+1];
        arr[i+1]=arr[high];
        arr[high]=temp;
        return i+1;
    } "
					
finding triplet sum					"for(int i=0;i<n-2;i++){
           int s=0-arr[i];
           int j=i+1;
           int k=n-1;
           while(j<k){
               if(arr[j]+arr[k]==s)
               return true;
               else if(arr[j]+arr[k]>s)
               k--;
               else
               j++;
           }
       }
       return false;"
					
					
merge without extra space				"public static void merge(long arr1[], long arr2[], int n, int m) 
    {
        // code here 
        int left=n-1;
    int right=0;
    int i,j=0;
    while(left>=0 && right<m){
    if(arr1[left]>arr2[right]){
        long temp=arr1[left];
        arr1[left]=arr2[right];
        arr2[right]=temp;
        left--;
        right++;
        
    }else{
        break;
    }
    }
    Arrays.sort(arr1);
    Arrays.sort(arr2);
    }"	
					
					
segaree 0,1,s			" int mid=0;
        int l=0,high=N-1;
        while(mid<=high){
            if(arr[mid]==0){
                int temp=arr[mid];
                arr[mid]=arr[l];
                arr[l]=temp;
                l++;
                mid++;
            }
            else if(arr[mid]==1){
                mid++;
            }else{
                int temp=arr[mid];
                arr[mid]=arr[high];
                arr[high]=temp;
                high--;
                
            }"		
					
					
					
					
					
tripulre=et sum I array				"Arrays.sort(A);
       int sum=0;
       for(int i=0;i<n-2;i++){
          HashSet<Integer> set=new HashSet<Integer>();
          int find=X-A[i];
          for(int j=i+1;j<n;j++){
              if(set.contains(find-A[j])){
                  return true;
              }
              set.add(A[j]);
          }
       }
       return false;"	
					
					
					
					
count no of triangles				"Arrays.sort(arr);
        int count=0;
        for(int i=0;i<arr.length-1;i++){
            int k=i+2;
            for(int j=i+1;j<arr.length;j++){
                while(k<n && arr[i]+arr[j]>arr[k]){
                    k++;
                }
                count+=k-j-1;
            }
        }
        return count;"	
// int i = 1, j = 0, cur = 1, res = 1;
    // while (i < arr.length && j < arr.length) {
    // if (arr[i] <= dep[j]) {
    // cur++;
    // i++;
    // } else {
    // cur--;
    // j++;
    // }
    // res = Math.max(cur, res);
    // }
    // return res;