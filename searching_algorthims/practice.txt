//majority element code
HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
        for(int i=0;i<size;i++){
            map.put(a[i],map.getOrDefault(a[i],0)+1);
        }
        for(int ele:map.keySet()){
            if(map.get(ele)>size/2){
                return ele;
            }
        }
        return -1;

        //median of two sorted arrays
     int newarr[]=new int[n+m];
        for(int i=0;i<n;i++){
            newarr[i]=arr[i];
        }
        for(int i=0;i<m;i++){
            newarr[n+i]=brr[i];
        }
        
        Arrays.sort(newarr);
        
        if(newarr.length%2==0){
            return (newarr[newarr.length/2]+newarr[(newarr.length/2)-1])/2;
        }
        return newarr[newarr.length/2];    

        //leftindex
        //part 1
        while (l <= high) {
            int mid = (l + high) / 2;
            if(arr[mid]==X) return mid;
            if (arr[mid] >= X) {
                ans = mid;
                high = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        if(arr[ans]!=X) return -1;
        return ans;
        //part 2 left index
        int l = 0, high = arr.length - 1, ans = -1;
        while (l <= high) {
            int mid = (l + high) / 2;
            if(arr[mid]>X){
                high=mid-1;
            }else if(arr[mid]<X){
                l=mid+1;
            }
          else  if(arr[mid]==X){
              if(mid==0 || arr[mid]!=arr[mid-1]){
                  return mid;
              }else{
                  high=mid-1;
              }
          } 
        }
    return -1;

        //floor of array using bs
        int l=0,high=arr.length-1;
        int ans=-1;
        while(l<=high){
            int mid=l+(high-l)/2;
            if(arr[mid]<=x){
                ans=mid;//instead of arr[mid] we should give mid
                l=mid+1;
            }else{
                high=mid-1;
            }
        }
        return ans;

        //sq root of a number
        long low=0,high=x,ans=-1;
		while(low<=high){
		    long mid=(low+high)/2;
		    long msq=mid*mid;
		    if(msq==x){
		        return mid;
		    }else if(msq>x){
		        high=mid-1;
		    }else{
		        low=mid+1;
		        ans=mid;
		    }
		}

        //peak elemnt code
        int low = 0, high = a.length - 1;
        while (low <= high) {
            int mid = low + high / 2;
            if ((mid == 0 || a[mid] <= a[mid - 1]) && (mid == a.length - 1 || a[mid + 1] <= a[mid])) {
                return mid;
            } else if (mid > 0 && a[mid - 1] >= a[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return -1;


        //smallest positive missing number
        int sum = 0;
        for(int i=0;i<n;i++){
            sum = sum + nums[i];
        }
        return ((n * (n+1))/2 - sum);

        //repating element 2
        //{ Driver Code Starts
//Initial template for JAVA

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG
 {
	public static void main (String[] args) throws IOException
	 {
	    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	    int t = Integer.parseInt(br.readLine());
	    for(int i=0;i<t;i++){
	        int n = Integer.parseInt(br.readLine());
	        String l = br.readLine();
    		String[] sarr = l.split(" ");
    		int[] arr = new int[sarr.length];
    		for(int i1=0;i1<arr.length;i1++){
    			arr[i1] = Integer.parseInt(sarr[i1]);
    		}
    		
            Solution obj = new Solution();
            
            int[] res = obj.twoRepeated(arr, n);
            System.out.println(res[0] + " " + res[1]);
	    }
	}
}
// } Driver Code Ends


//User function template for JAVA

class Solution
{
    //Function to find two repeated elements.
    public int[] twoRepeated(int arr[], int n)
    {
        // Your code here
        int ans[]=new int[2];
        int digitCount[]=new int[n+1];
        int j=0;
        for(int i=0;i<n+2;i++){
            digitCount[arr[i]]++;
            if(digitCount[arr[i]]==2){
                ans[j]=arr[i];
                j++;
            }
        }
        return ans;
    }
    
}
//allocate min pages
 static boolean isPossible(int arr[], int n, int m,
                              int curr_min)
    {
        int studentsRequired = 1;
        int curr_sum = 0;
 
        // iterate over all books
        for (int i = 0; i < n; i++) {
            curr_sum += arr[i];
            if (curr_sum > curr_min) {
                studentsRequired++; // increment student
                                    // count
 
                curr_sum = arr[i]; // update curr_sum
            }
        }
 
        return studentsRequired <= m;
    }
 